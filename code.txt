#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
brain_inertial = Inertial()
controller = Controller()
motor_4 = Motor(Ports.PORT12, False)
elevator = Motor(Ports.PORT5, False)
motor_left = Motor(Ports.PORT1, False)
motor_right = Motor(Ports.PORT6, True)
#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:      VEXcode Project
# 	Author:       Rawi N
# 	Created:      22/1/2023
# 	Description:  VEXcode.py
# 
# ------------------------------------------


#-------------------------------------------

# config speedmode

motor4speed = 100
motorcarspeed = 100
motorcarturnspeed = 75
liftspeed = 100


#---------------------------------------------



# config slowmode


motorcarspeedslow = 40
motorcarturnspeedslow = 20


#---------------------------------------------





# Library imports
from vex import *





def main():
    

    while True :
     
        a =controller.axisA.position()
        c = controller.axisC.position()
      
        if controller.axisA.position() >= 10:
            #forward
            motor_left.set_velocity(a,PERCENT)
            motor_right.set_velocity(a,PERCENT)

        elif controller.axisA.position() <= -10:
            #backward
            
           motor_left.set_velocity(a,PERCENT)
           motor_right.set_velocity(a,PERCENT)
        

        elif controller.axisC.position() >= 10:
            #right
            
            motor_left.set_velocity(c-(10),PERCENT)
            motor_right.set_velocity((c-(10))*(-1),PERCENT)

            
        elif controller.axisC.position() <= -10:
            #left
            motor_left.set_velocity(c-(10),PERCENT)
            motor_right.set_velocity((c-(10))*(-1),PERCENT)


        elif controller.buttonLUp.pressing():
          
            motor_4.set_velocity(motor4speed, PERCENT)
            elevator.set_velocity(liftspeed, PERCENT)

        elif controller.buttonLDown.pressing():
        
            motor_4.set_velocity(motor4speed, PERCENT)
            elevator.set_velocity(liftspeed, PERCENT)

        

        elif controller.buttonEUp.pressing():
            #spin button
           
            motor_4.spin(FORWARD)
        
        elif controller.buttonFUp.pressing():
            #elevator up
          
           
            elevator.spin_for(FORWARD,470, DEGREES)


        elif controller.buttonFDown.pressing():
            #elevator down
        
           
            elevator.spin_for(REVERSE,472, DEGREES)

       
        else:
            #stop
            elevator.stop();
            motor_4.stop();
            motor_left.set_velocity(0,PERCENT)
            motor_right.set_velocity(0,PERCENT)
        motor_left.spin(FORWARD)
        motor_right.spin(FORWARD)
    




motor_left.stop()
motor_right.stop()

    


main()



